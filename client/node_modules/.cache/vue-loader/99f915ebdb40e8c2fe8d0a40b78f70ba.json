{"remainingRequest":"C:\\Users\\Asus\\Desktop\\TTT\\pxu\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Asus\\Desktop\\TTT\\pxu\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Asus\\Desktop\\TTT\\pxu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Asus\\Desktop\\TTT\\pxu\\src\\views\\Sign-Up.vue?vue&type=template&id=5e08cbfe&","dependencies":[{"path":"C:\\Users\\Asus\\Desktop\\TTT\\pxu\\src\\views\\Sign-Up.vue","mtime":1631115888000},{"path":"C:\\Users\\Asus\\Desktop\\TTT\\pxu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651213063001},{"path":"C:\\Users\\Asus\\Desktop\\TTT\\pxu\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651213074183},{"path":"C:\\Users\\Asus\\Desktop\\TTT\\pxu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651213063001},{"path":"C:\\Users\\Asus\\Desktop\\TTT\\pxu\\node_modules\\vue-loader\\lib\\index.js","mtime":1651213069968}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}