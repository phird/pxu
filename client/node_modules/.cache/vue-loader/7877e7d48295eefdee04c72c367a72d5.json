{"remainingRequest":"D:\\GitHub\\pxu-web\\client\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\GitHub\\pxu-web\\client\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GitHub\\pxu-web\\client\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\pxu-web\\client\\src\\views\\Todo.vue?vue&type=template&id=524c8880&scoped=true&","dependencies":[{"path":"D:\\GitHub\\pxu-web\\client\\src\\views\\Todo.vue","mtime":1652344850174},{"path":"D:\\GitHub\\pxu-web\\client\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651634972757},{"path":"D:\\GitHub\\pxu-web\\client\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651635696334},{"path":"D:\\GitHub\\pxu-web\\client\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651634972757},{"path":"D:\\GitHub\\pxu-web\\client\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1651635696127}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}